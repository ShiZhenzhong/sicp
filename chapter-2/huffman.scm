(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? node)
  (eq? (car node) 'leaf))
(define (symbol-leaf leaf)
  (cadr leaf))
(define (weight-leaf leaf)
  (caddr leaf))

(define (make-code-tree left right)
  (list left right (append (symbols left)
                           (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch node)
  (car node))
(define (right-branch node)
  (cadr node))
(define (symbols node)
  (if (leaf? node)
    (list (symbol-leaf node))
    (caddr node)))
(define (weight node)
  (if (leaf? node)
    (weight-leaf node)
    (cadddr node)))

(define (decode bits code-tree)
  (define (choose-branch bit cb)
    (cond ((= bit 0) (left-branch cb))
          ((= bit 1) (right-branch cb))
          (else (error "bad bit -- CHOOSE-BRANCH" bit))))
  (define (iter bs current-branch)
    (if (null? bs) '()
      (let ((next-branch (choose-branch (car bs) current-branch)))
        (if (leaf? next-branch)
          (cons (symbol-leaf next-branch)
                (iter (cdr bs) code-tree))
          (iter (cdr bs) next-branch)))))
  (iter bits code-tree))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set)))
         (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs) '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf (car pair)
                             (cadr pair))
                  (make-leaf-set (cdr pairs))))))

(define pairs (list '(A 4) '(C 1) '(D 1) '(B 2)))

; Exercise 2.67
(define sample-tree (make-code-tree (make-leaf 'A 4)
                                    (make-code-tree (make-leaf 'B 2)
                                                    (make-code-tree (make-leaf 'D 1)
                                                                    (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

; Exercise 2.68
(define (encode message tree)
  (define (element-of-set? char symbols)
    (cond ((null? symbols) false)
          ((eq? char (car symbols)) true)
          (else (element-of-set? char (cdr symbols)))))
  (define (encode-symbol char tree)
    (let ((left-branch (left-branch tree))
          (right-branch (right-branch tree)))
      (cond ((and (leaf? left-branch) (eq? char (symbol-leaf left-branch))) (list '0))
            ((and (leaf? right-branch) (eq? char (symbol-leaf right-branch))) (list '1))
            ((element-of-set? char (symbols left-branch)) (cons '0 (encode-symbol char left-branch)))
            ((element-of-set? char (symbols right-branch)) (cons '1 (encode-symbol char right-branch)))
            (else (error "bad char -- ENCODE-SYMBOL" char)))))

  (if (null? message) '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))

; Exercise 2.69
(define (generate-huffman-tree pairs)
  (define (successive-merge ordered-pairs)
    (if (= 1 (length ordered-pairs)) (car ordered-pairs)
      (let ((merged-pairs (adjoin-set (make-code-tree (car ordered-pairs) 
                                                      (cadr ordered-pairs)) 
                                      (cddr ordered-pairs))))
        (successive-merge merged-pairs))))
  (successive-merge (make-leaf-set pairs)))
(define ght generate-huffman-tree)

; Exercise 2.70
(define rock-pairs '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1)))
(define rock-message '(get a job sha na na na na na na na na get a job sha na na na na na na na na wah yip yip yip yip yip yip yip yip sha boom))
