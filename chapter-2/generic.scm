(define container (list))
(define (get op args-type-list)
  (define (iter remainings)
    (if (null? remainings) false
      (let ((head (car remainings)))
        (if (and (eq? op (car head))
                 (equal? (cadr head) args-type-list))
          (caddr head)
          (iter (cdr remainings))))))
  (iter container))
(define (put op args-type-list operator)
  (if (get op args-type-list)
    (error "Operator with the same flag and argument list already existed")
    (set! container (cons (list op args-type-list operator) container))))

(define (attach-type type contents) (cons type contents))
(define (type element) (car element))
(define (content element) (cdr element))

(define (apply-generic op . args)
  (let ((args-type-list (map type args)))
    (let ((operator (get op args-type-list)))
      (if operator
        (apply operator (map content args))
        (error "No operator found")))))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (make-scheme-number i) ((get 'make '(scheme-number)) i))
(define (make-rational n d) ((get 'make '(rational)) n d))

(define (install-scheme-number)
  (define (tag i)
    (attach-type 'scheme-number i))
  (define add (lambda (x y) (tag (+ x y))))
  (define sub (lambda (x y) (tag (- x y))))
  (define mul (lambda (x y) (tag (* x y))))
  (define div (lambda (x y) (tag (/ x y))))
  (define (make-scheme-number i) (tag i))

  (put 'add '(scheme-number scheme-number) add)
  (put 'sub '(scheme-number scheme-number) sub)
  (put 'mul '(scheme-number scheme-number) mul)
  (put 'div '(scheme-number scheme-number) div)
  (put 'make '(scheme-number) make-scheme-number)
  'done)

(define (install-rational)
  ; definitions for rational number
  (define (make-rational numera denomi)
    (let ((g (gcd numera denomi)))
      (cons (/ numera g) (/ denomi g))))
  (define (numer r) (car r))
  (define (denom r) (cdr r))
  (define (tag r) (attach-type 'rational r))
  
  (define (add-rational x y)
    (make-rational (+ (* (numer x) (denom y))
                      (* (numer y) (denom x)))
                   (* (denom x) (denom y))))
  (define (sub-rational x y)
    (make-rational (- (* (numer x) (denom y))
                      (* (numer y) (denom x)))
                   (* (denom x) (denom y))))
  (define (mul-rational x y)
    (make-rational (* (numer x) (numer y))
                   (* (denom x) (denom y))))
  (define (div-rational x y)
    (make-rational (* (numer x) (denom y))
                   (* (numer y) (denom x))))

  (put 'add '(rational rational) add-rational)
  (put 'sub '(rational rational) sub-rational)
  (put 'mul '(rational rational) mul-rational)
  (put 'div '(rational rational) div-rational)
  (put 'make '(rational) (lambda (n d) (tag (make-rational n d))))
  'done)


(define (install-complex)
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real z1) (real z2))
                         (+ (imag z1) (imag z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real z1) (real z2))
                         (- (imag z1) (imag z2))))
  (define (mul-complex z1 z2)
    (make-from-magnitude-angle (* (magnit 
  (define (install-complex-rectangle)
      (define (tag z) (attach-type 'rect-complex z))
      (define (make-from-real-imag real imag) (cons real imag))
      (define (real c) (car c))
      (define (imag c) (cdr c))
      (define (magnit z)
        (sqrt (+ (square (real z))
                 (square (imag z)))))
      (define (angl z) (atan (imag z) (real z)))

      (put 'add-complex-rect '(rect-complex rect-complex) add-complex)
      (put 'sub-complex-rect '(rect-complex rect-complex) sub-complex)
      (put 'real-part '(rect-complex) real)
      (put 'imag-part '(rect-complex) imag)
      (put 'make-from-real-imag '(complex-rect) (lambda (real imag) (tag (make-from-real-imag real imag))))
      'done)

  (define (install-complex-polar)
      (define (make-from-magnitude-angle mag ang) (cons mag nag))
      (define (magnit c) (car  c))
      (define (angl c) (cdr c))
      (define (real z) (* (magnit z) (cos (angl z))))
      (define (imag z) (* (magnit z) (sin (angl z))))

(install-scheme-number)
(install-rational)
